The muddle release mechanism
============================

.. note:: This is written as part of specifying the mechanism before
   implementation. It should be expanded to be more helpful once the
   implementation is done.

Muddle release files
--------------------
These are a muddle stamp file (specifically, a stamp version file) with extra
fields (at the start). The required part is::

    [RELEASE]
    version = 1.2.3

but there will be optional fields, probably including::

    compression = <mechanism>

(``gzip`` or ``bzip2``, with ``gzip`` the default).

Release files are created using ``muddle release``.

The command::

    $ muddle stamp release Project99 1.2.3

creates a release stamp file called::

    versions/Project99_1.2.3.release

which looks like a normal version 2 stamp file with an extra section after
the ``[STAMP]`` section::

    [RELEASE]
    name = Project99
    version = 1.2.3
    archive = tar
    compression = gzip

You can use the ``-archive`` and ``-compression`` switches to specify the
release archive mechanism and release compression - for instance::

    $ muddle stamp release Project99 1.2.3 -archive tar -compression bzip2

It is also possible to create a "template" release file, with unspecified
release name and version::

    $ muddle stamp release -template

which creates a file called::

    versions/this-is-not-a-file-name.release

with the ``[RELEASE]`` section set to::

    [RELEASE]
    name = <REPLACE THIS>
    version = <REPLACE THIS>
    archive = tar
    compression = gzip

The user is expected to rename the file and edit the ``<REPLACE THIS>`` values
to something sensible. The ``muddle release`` command will not accept release
files where theses field has not been edited (actually, where there are
"naughty" characters in the field).

.. note:: Both release name and release version follow the same rules:

   * the first character must be an ASCI alphanumeric ('A'-'Z', 'a'-'z',
     '0'-'9')
   * any following characters must be ASCII alphanumeric, '-', '_' or '.'

   The release archive must currently be "tar".

   The release compression must currently be one of "gzip" or "bzip2". The
   default is "gzip".

Since release files go in the ``versions/`` directory, ``muddle stamp release``
will add them to the version control system in that directory, just as
``muddle stamp version`` does for its stamp files.

The ``_release`` build target
-----------------------------
This is a new build target, for use as ``muddle build _release``.

It needs to be specified in the build description.

We use ``builder.add_to_release_build()`` to do this.

.. note:: Precedence would suggest that this should be a method on the
   Invocation, and not the Builder. But accessing the methods that are
   already on ``builder.invocation.`` is a pain, and there seems little
   justification for adding to that pain. I could have provided a method
   on the Invocation and an alias on the builder, but again that seems to
   be making life awkward for no real reason. So, it can go on the Builder.

Items can be added to the ``_release`` entity as labels, individually::

    builder.add_to_release_build(package('fred', 'x86')

or as sequences::

    builder.add_to_release_build([package('fred', 'x86'),
                                  Label.from_string('package:(infrastructure)jim{*}/*')])

Wildcards can be useful, as shown.

The "special" values ``_all``, ``_default_roles`` and ``_default_deployments``
can also be used::

    builder.add_to_release_build('_default_deployments')

The ``_release`` value is interpreted and expanded lazily, as that implies,
when the muddle command line is interpreted. This means one is allowed to
do::

    builder.add_to_release_build('_default_deployments')

before the deployments have actually all been described, which is useful.

.. warning:: This also means that ``add_to_release_build()`` itself cannot
   complain if you add a non-existant label, since after all this is part
   of its intent. Such warnings will have to wait until ``_release`` is
   actually used in a "muddle" command.

``muddle query release`` can be used to find out what ``_release`` is set to
(see ``muddle help query release`` for details).

.. note:: What to release is only specified by the *top-level* build
   description. Thus is a subdomain build description includes calls to
   ``builder.add_to_release_build()``, those calls *will be ignored*.
   It is up to the top-level build to explicitly include anything it wishes
   to release from the subdomain.

   This decision is made partly because of the confusion if a subdomain
   were to include, for instance, ``_all`` in its "what to release". Does that
   mean "_all for the subdomain", or just "overall _all"? I think it would
   have to mean the former, and that would mean we would either need to make
   up a syntax for saying that (and ``(subdomain)_all`` is not nice), or we
   would need to expand the ``_all`` as part of including the subdomain into
   its parent (since at that point its meaning is fully known). That last
   would seem to be the way to go, but I'm still sufficiently uncomfortable
   with it to want to leave it undone.

   It is possible that this decision might be reviewed in the future.

The ``release_from`` function in the build description
------------------------------------------------------
This looks like::

    def release_from(builder):
        ...

It is the job of this function to generate the release tarball.

I think we can assume that ``describe_to()`` will have been called first, so
that we have labels available.

.. note:: ``muddle bootstrap`` should probably generate a suitable template.

There will be some extra values retrievable from the builder (by some means),
including

* the name of the release directory, which muddle will already have created,
  and which will be called ``<build-name>-<release-version>.<release-sha1>``
* the full path to the release directory (yes, the name could be derived from
  that, but we can be friendly)
* the release SHA1 and release version

The function works by putting stuff to be released into the release
directory, which muddle will tar up and compress to produce the release
tarball. Muddle will already have copied the release file into the release
directory.

This step should probably be available as a specific muddle command - but
maybe via "muddle release -again" or somesuch. Of course, doing that
guarantees that the ``describe_to`` will have been executed first.

.. warning:: Only the ``release_from()`` function in the top-level build
   will be executed. Any ``release_from()`` functions in subdomain build
   descriptions will not be called by muddle itself.

The ``muddle release`` command
------------------------------
For example::

  $ muddle release project99-1.2.3.release

This:

1. Creates a directory called ``project99-1.2.3.release`` and cd's into it

2. Does (the equivalent of) ``muddle unstamp`` using that release file.

3. Copies the release file as ``.muddle/Release``. Also creates a small file
   called ``.muddle/ReleaseSpec``, which contains the basic information
   describing a release (name, version, SHA1 hash of the release file, etc.)
   The existence of this latter file indicates that this is a release build
   tree, and some muddle commands will thus refuse to work in it (notably,
   anything to do with pushing to or pulling from a VCS).

   (Of course, the user can delete the file, but if they do then that's their
   responsibility.)

4. In a release build tree, muddle sets some extra environment variables:
   
   * ``MUDDLE_RELEASE_HASH`` is the SHA1 hash of the release file
   * ``MUDDLE_RELEASE_NAME`` is the name string from the ``name =`` line.
   * ``MUDDLE_RELEASE_VERSION`` is the version string from the ``version =``
     line.

   "Normal" muddle will also create those environment variables, but they will
   be set to ``(unset)``.

5. Does (the equivalent of) ``mudddle build _release``.

6. Creates the release directory,
   ``<release-name>_<release-version>_<release-sha1>``, and copies the release
   file into it.

7. Calls the ``release_from(builder)`` function in the build description
   (obviously it is an error if there isn't one).

   Note that the tarball directory (step 6) will be passed to the function
   somehow - either as another function argument, or via the builder object.

      This is probably actually best done with yet another muddle command -
      maybe::

          $ muddle release -???

      This would allow for sequences like:

          $ muddle ../release project99_v1.2.3.release
          ...
          <realise that we have the wrong compiler installed>
          ...
          $ muddle veryclean _all
          $ muddle build _release
          $ muddle release -???

8. Creates a compressed tarball of the release directory, using the
   appropriate compression mechanism.





.. vim: set filetype=rst tabstop=8 softtabstop=2 shiftwidth=2 expandtab:
